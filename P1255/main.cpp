#include <iostream>
using namespace std;

unsigned int F[5001][5000] = {0}, input, len = 1;

void plusnum(int index1, int index2, int targetindex) {
    for(int i = 0; i < len; i++) {
        F[targetindex][i] = F[index1][i] + F[index2][i] + F[targetindex][i];
        if (F[targetindex][i] >= 10) {
            F[targetindex][i + 1] += 1;
            F[targetindex][i] -= 10;
            if(i == len - 1) len += 1;
        }
    }
}

int main() {
    F[1][0] = 1;
    F[2][0] = 2;
    cin>>input;
    for(int i = 3; i <= input; i++)
        plusnum(i - 1, i - 2, i);
        // F[i] = F[i - 1] + F[i - 2];
    for(int i = len - 1; i >= 0; i--)
        cout<<F[input][i];
    return 0;
}

// 对于任意位置，我要么走一格到这，要么走两格到这
// 如果规定走一格到这，那所有走法就是F[n-1]，即走到上一格的所有走法
// 如果规定走两格到这，那所有走法就是F[n-2]，即走到上两格的所有走法
// 给予当前状态的所有可能性，推理在那个可能性下的走法，然后把这些可能性加起来

// F[n] = Fibonacci(f-1)
// F[1] = 1
// F[2] = 2
// F[n] = F(n-1) + f(n-2)
// F[1] = 1
// F[2] = 2
// F[3] = F[2] + F[1] = 3
// F[4] = F[3] + F[2] = 5
// F[5] = F[4] + F[3] = 8

//         1
// N = 1 : 1
// 1

//         1   2
// N = 2 : 1 + 1 = 2
//             1   1
// 1 1
// 2

//         1   2
// N = 3 : 1 + 2 = 3
//             1   1
// 1 1 1
// 1 2
// 2 1

//         1   2   3
// N = 4 : 1 + 3 + 1 = 5
//             1   1   2
// 1 1 1 1
// 1 1 2
// 1 2 1
// 2 1 1
// 2 2

//         1   2   3
// N = 5 : 1 + 4 + 3 = 8
//             1   2   3
// 1 1 1 1 1
// 1 1 1 2
// 1 1 2 1
// 1 2 1 1
// 2 1 1 1
// 1 2 2
// 2 1 2
// 2 2 1

//         1   2   3   4
// N = 6 : 1 + 5 + 6 + 1 = 13
//             1   3   1   5
// 1 1 1 1 1 1
// 1 1 1 1 2
// 1 1 1 2 1
// 1 1 2 1 1
// 1 2 1 1 1
// 2 1 1 1 1
// 1 1 2 2
// 1 2 2 1
// 2 2 1 1
// 2 1 2 1
// 1 2 1 2
// 2 1 1 2
// 2 2 2

//         1   2   3    4
// N = 7 : 1 + 6 + 10 + 4 = 21
//             1   4    3   8
// 1 1 1 1 1 1
// 1 1 1 1 1 2
// 1 1 1 1 2 1
// 1 1 1 2 1 1
// 1 1 2 1 1 1
// 1 2 1 1 1 1
// 2 1 1 1 1 1
// 2 2 1 1 1
// 2 1 2 1 1
// 2 1 1 2 1
// 2 1 1 1 2
// 1 2 2 1 1
// 1 2 1 2 1
// 1 2 1 1 2
// 1 1 2 2 1
// 1 1 2 1 2
// 1 1 1 2 2
// 2 2 2 1
// 2 2 1 2
// 2 1 2 2
// 1 2 2 2